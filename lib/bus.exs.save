defmodule Bus do 

def fetch_connections do
 station_list = get_station_lists
 #(1..12219)
 (1..2)
 |> Enum.chunk(200, 200, [])
 |> Enum.map(fn x ->  connection_data(x, station_list) end)  
end

def connection_data(batch, station_list) do
 {:ok, p} =  Mariaex.Connection.start_link(username: "root", password: "mmtp123", database: "mmtp")
 ids = Enum.join(batch, ", ") 
 {:ok,result} = Mariaex.Connection.query(p, "SELECT * FROM mytable where ID in(#{ids})")
 result = Map.get(result, :rows)
 result = result
  |> Enum.map(fn x -> prepare_line(x, station_list) end)
  |> Enum.filter(fn x -> (Enum.at(x, 1) != nil && Enum.at(x, 2) != nil )end)
  |> Enum.map(fn x -> Enum.join(x, " ") end)
  |> Enum.join("\n")
 File.write("data/connections_buses.txt", result <> "\n", [:append])
end

def prepare_line(row, station_list) do
 [id, _, dep, _, arr, route_id, dep_t, arr_t | _] = row
 dep = get_station_id(dep, station_list)
 arr = get_station_id(arr, station_list)
 arr_t = arr_t * 60
 dep_t = dep_t * 60
 if dep_t > arr_t do
   arr_t = arr_t + 86400
 end
 [route_id, dep, arr, dep_t, arr_t, "bus"]
end

def get_station_id(dep, station_list) do
 station = station_list
 |> Enum.find(fn x -> String.contains?("#{Enum.at(x, 1)}", "#{dep}") end)

 case station do
  nil -> 
   nil
  _ ->
   Enum.at(station, 0)
 end 
end

def get_station_lists do
 {:ok, p} =  Mariaex.Connection.start_link(username: "root", password: "mmtp123", database: "mmtp")
 {:ok, result} = Mariaex.Connection.query(p, "SELECT * FROM station_details WHERE mode='bus'")
 result = result
 |> Map.fetch!(:rows)
 result
end

end
IO.inspect Bus.fetch_connections
